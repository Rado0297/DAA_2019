#include<iostream>
#include<vector>
using namespace std;
vector<vector<int> >a;
int n, m;
bool used[128];

void dfs(int v){                            //алгоритъм DFS
    used[v]=1;                              //отбелязваме текущия връх за обходен
    cout<<v<<" ";
    for(int i=0; i<a[v].size(); i++){       //обхождаме всички върхове на подвектора V
        if(used[a[v][i]]==0)                //ако текущия връх не е обходен
            dfs(a[v][i]);                   //задаваме рекурсия на DFS с i-тия връх от подвектора V
    }
}

int main ()
{
    cin>>n>>m;
    a.resize(n+1);                          //задаваме вектора A да има N+1 подвектора
    int v, u;
    for(int i=0; i<m; i++){                 //колкото са ребрата
        cin>>v>>u;                          //въвеждаме връх V и връх U, между които има ребро
        a[v].push_back(u);                  //добавяме в подвектора V връх U
        a[u].push_back(v);                  //добавяме в подвектора U връх V (при неориентиран граф)
    }

    cin>>v;                                 //въвеждаме начален връх V за обхождането
    dfs(v);                                 //задаваме DFS с начален връх V

    return 0;
}

/*
DFS (Depth-First-Search) е алгоритъм за обхождане на граф в дълбочина. Т.е. рекурсивно преминаваме от един връх в първия негов необходен съсед и
така се спускаме до дъното на графа (до връх, който няма необходени съседи). Рекурсивно се връщаме до първия необходен връх и повтаряме.
Приложенията му са за намиране на цикли в граф и броене на мостове (ребра, свързващи отделните компоненти).
*/
