#include<bits/stdc++.h>
using namespace std;
int n, m;
vector<vector<int> >graph;
vector<bool>used;

void bfs(int v){                                    //BFS алгоритъм с начален връх V
    queue<int>q;
    used[v]=1;                                      //отбелязваме началния връх за обходен
    q.push(v);                                      //добавяме го в опашката
    while(!q.empty()){                              //докато опашката не е празна
        v=q.front();                                //взимаме първия връх от нея
        cout<<v<<endl;                              //печатаме го
        q.pop();                                    //и го изваждаме от опашката
        for(int i=0; i<graph[v].size(); i++){       //обхождаме подвектора, съдържащ съседите на този връх
            if(used[graph[v][i]]==0){               //ако срещнем необходен съсед
                used[graph[v][i]]=1;                //го отбелязваме за обходен
                q.push(graph[v][i]);                //и го добавяме в опашката
            }
        }
    }
}

int main ()
{
    cin>>n>>m;                                      //граф с N върха и M ребра
    int x, y;
    graph.resize(n+1);
    used.resize(n+1);
    for(int i=0; i<m; i++){
        cin>>x>>y;                                 //мужду X и Y има ребро
        graph[x].push_back(y);                     //добавяме Y като съсед на X
        graph[y].push_back(x);                     //и X като съсед на Y (при неориентиран граф)
    }
    cin>>x;                                         //въвеждаме начален връх за BFS
    bfs(x);                                         //и извикваме BFS от този връх

    return 0;
}

/*
BFS (Breadth-First-Search) е абгоритъм за обхождане на граф в ширина (по нива). Започва се от един връх, който се маркира за обходен. След това
се маркират всички негови непосетени съседи. Преминава се към първия от тях и процедурата се повтаря.
Приложенията са за броене на нивата в граф и за броене на компоненти.
*/
